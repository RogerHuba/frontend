"use client";

import { useState, useEffect } from "react";
import { PageLayout } from "@/components/PageLayout";
import { SkillTree } from "@/components/character-builder/SkillTree";
import { SkillModifiers } from "@/components/character-builder/SkillModifiers";
import { Commands } from "@/components/character-builder/Commands";
import { ProfessionList } from "@/components/character-builder/ProfessionList";


import { CharacterStatsSummary } from "@/components/character-builder/CharacterStatsSummary";
import { BuildExportImport } from "@/components/character-builder/BuildExportImport";
import { TemplateSelector } from "@/components/character-builder/TemplateSelector";
import { professionData } from "@/components/character-builder/data/professions";
import { speciesData } from "@/components/character-builder/data/species";
import type { ProfessionTemplate } from "@/components/character-builder/data/professionTemplates";

export type Species = {
  id: string;
  name: string;
  modifiers: {
    [key: string]: number;
  };
};

export type SkillBox = {
  id: string;
  name: string;
  skillPoints: number;
  xpCost: number;
  prerequisites: string[];
  grants: {
    commands?: string[];
    certifications?: string[];
    modifiers?: {
      [key: string]: number;
    };
  };
  isSelected?: boolean;
};

export type Profession = {
  id: string;
  name: string;
  description: string;
  type: "basic" | "elite" | "force" | "jedi" | "pilot";
  prerequisites?: string[]; // Required skill box IDs to unlock this profession
  skillTrees: {
    [key: string]: {
      name: string;
      boxes: SkillBox[];
      connections?: {
        [key: string]: string[]; // Maps skillBox ID to an array of IDs it connects to
      };
    };
  };
  noviceBox: SkillBox;
  masterBox?: SkillBox;
  leadsTo?: {
    [key: string]: string; // Profession ID -> Required skill box ID
  };
};

// Character Template Interface
export interface CharacterTemplate {
  id: string;
  name: string;
  speciesId: string;
  professionId: string;
  selectedSkillBoxes: string[];
  usedSkillPoints: number;
  createdAt: Date;
}

export function CharacterBuilder() {
  const MAX_SKILL_POINTS = 250;

  const [selectedSpecies, setSelectedSpecies] = useState<Species>(speciesData[1]); // Default to human
  const [selectedProfession, setSelectedProfession] = useState<Profession>(professionData.find(p => p.id === 'brawler') || professionData[0]);
  const [skillPoints, setSkillPoints] = useState<number>(MAX_SKILL_POINTS);
  const [usedSkillPoints, setUsedSkillPoints] = useState<number>(0);
  const [selectedSkillBoxes, setSelectedSkillBoxes] = useState<string[]>([]);
  const [earnedCommands, setEarnedCommands] = useState<string[]>([]);
  const [earnedCertifications, setEarnedCertifications] = useState<string[]>([]);
  const [skillModifiers, setSkillModifiers] = useState<{[key: string]: number}>({});
  const [activeSkill, setActiveSkill] = useState<string>('brawler_novice');
  const [skillPointWarning, setSkillPointWarning] = useState(false);

  // Template management
  const [savedTemplates, setSavedTemplates] = useState<CharacterTemplate[]>([]);
  const [showSaveDialog, setShowSaveDialog] = useState(false);
  const [showLoadDialog, setShowLoadDialog] = useState(false);
  const [showShareDialog, setShowShareDialog] = useState(false);
  const [templateName, setTemplateName] = useState("");

  // Profession template selector
  const [showTemplateSelector, setShowTemplateSelector] = useState(false);

  // Get all skill boxes from all professions (for multi-profession support)
  const getAllSkillBoxes = (): SkillBox[] => {
    const allBoxes: SkillBox[] = [];

    // Include boxes from all professions, not just the currently viewed one
    for (const profession of professionData) {
      allBoxes.push(profession.noviceBox);

      if (profession.masterBox) {
        allBoxes.push(profession.masterBox);
      }

      for (const treeKey in profession.skillTrees) {
        const tree = profession.skillTrees[treeKey];
        allBoxes.push(...tree.boxes);
      }
    }

    return allBoxes;
  };

  // Get skill boxes for the currently viewed profession only
  const getCurrentProfessionSkillBoxes = (): SkillBox[] => {
    const allBoxes: SkillBox[] = [selectedProfession.noviceBox];

    if (selectedProfession.masterBox) {
      allBoxes.push(selectedProfession.masterBox);
    }

    for (const treeKey in selectedProfession.skillTrees) {
      const tree = selectedProfession.skillTrees[treeKey];
      allBoxes.push(...tree.boxes);
    }

    return allBoxes;
  };

  // Initialize with no skills selected - allow players to choose their path
  useEffect(() => {
    // Only initialize on first mount, don't reset when profession changes
    // This allows mixing multiple professions as in SWG
    // Start with empty character - no automatic novice selection
    setSelectedSkillBoxes([]);
    setUsedSkillPoints(0);
    setEarnedCommands([]);
    setEarnedCertifications([]);
    // Don't call recalculateModifiers here to avoid dependency warning
  }, []); // Empty dependency array - only run once on mount

  // Handle profession change
  const handleProfessionChange = (professionId: string) => {
    const profession = professionData.find(p => p.id === professionId);
    if (profession) {
      // Don't reset character in SWG - allow mixing professions
      setSelectedProfession(profession);
    }
  };

  // Handle species change
  const handleSpeciesChange = (speciesId: string) => {
    const species = speciesData.find(s => s.id === speciesId);
    if (species) {
      setSelectedSpecies(species);
      recalculateModifiers();
    }
  };

  // Get all boxes that depend on a given box (recursively)
  const getDependentBoxes = (skillBoxId: string): string[] => {
    const dependents: string[] = [];
    const allBoxes = getAllSkillBoxes();

    for (const box of allBoxes) {
      if (box.prerequisites.includes(skillBoxId) && selectedSkillBoxes.includes(box.id)) {
        dependents.push(box.id);
        // Recursively get dependents of this box
        dependents.push(...getDependentBoxes(box.id));
      }
    }

    return [...new Set(dependents)]; // Remove duplicates
  };

  // Check if profession prerequisites are met
  const checkProfessionPrerequisites = (profession: Profession): { met: boolean; missing: string[] } => {
    if (!profession.prerequisites || profession.prerequisites.length === 0) {
      return { met: true, missing: [] };
    }

    const missing: string[] = [];
    for (const prereqId of profession.prerequisites) {
      if (!selectedSkillBoxes.includes(prereqId)) {
        missing.push(prereqId);
      }
    }

    return {
      met: missing.length === 0,
      missing: missing
    };
  };

  // Get human-readable names for prerequisite skill boxes
  const getPrerequisiteNames = (skillBoxIds: string[]): string[] => {
    const allBoxes = getAllSkillBoxes();
    return skillBoxIds.map(id => {
      const box = allBoxes.find(b => b.id === id);
      return box ? box.name : id;
    });
  };

  // Get all prerequisite boxes needed for a given box (recursively)
  const getPrerequisiteBoxes = (skillBoxId: string): string[] => {
    const allBoxes = getAllSkillBoxes();
    const targetBox = allBoxes.find(box => box.id === skillBoxId);

    if (!targetBox) return [];

    const prerequisites: string[] = [];

    for (const prereqId of targetBox.prerequisites) {
      if (!selectedSkillBoxes.includes(prereqId)) {
        prerequisites.push(prereqId);
      }
      // Always recursively get prerequisites, regardless of selection status
      prerequisites.push(...getPrerequisiteBoxes(prereqId));
    }

    return [...new Set(prerequisites)]; // Remove duplicates
  };

  // Handle active skill change for hover preview
  const handleActiveSkillChange = (skillId: string) => {
    setActiveSkill(skillId);
  };

  // Show skill point warning temporarily
  useEffect(() => {
    if (skillPointWarning) {
      const timer = setTimeout(() => {
        setSkillPointWarning(false);
      }, 2500);
      return () => clearTimeout(timer);
    }
  }, [skillPointWarning]);

  // Custom skill selection handler that matches the reference behavior
  const handleSkillBoxSelectionWithWarning = (skillBoxId: string) => {
    const allBoxes = getAllSkillBoxes();
    const skillBox = allBoxes.find(box => box.id === skillBoxId);

    if (!skillBox) return;

    // Check if already selected - DESELECT MODE
    if (selectedSkillBoxes.includes(skillBoxId)) {
      // Get all boxes that depend on this one
      const dependentBoxes = getDependentBoxes(skillBoxId);
      const boxesToRemove = [skillBoxId, ...dependentBoxes];

      // Calculate total skill points to remove
      let totalPointsToRemove = 0;
      const commandsToRemove: string[] = [];
      const certificationsToRemove: string[] = [];

      for (const boxId of boxesToRemove) {
        const box = allBoxes.find(b => b.id === boxId);
        if (box) {
          totalPointsToRemove += box.skillPoints;
          if (box.grants.commands) {
            commandsToRemove.push(...box.grants.commands);
          }
          if (box.grants.certifications) {
            certificationsToRemove.push(...box.grants.certifications);
          }
        }
      }

      // Remove all dependent boxes
      setSelectedSkillBoxes(prev => prev.filter(id => !boxesToRemove.includes(id)));
      setUsedSkillPoints(prev => prev - totalPointsToRemove);
      setEarnedCommands(prev => prev.filter(cmd => !commandsToRemove.includes(cmd)));
      setEarnedCertifications(prev => prev.filter(cert => !certificationsToRemove.includes(cert)));
      recalculateModifiers();

      return;
    }

    // SELECT MODE - Auto-select prerequisites
    const prerequisiteBoxes = getPrerequisiteBoxes(skillBoxId);
    const boxesToAdd = [...prerequisiteBoxes, skillBoxId];

    // Calculate total skill points needed
    let totalPointsNeeded = 0;
    const commandsToAdd: string[] = [];
    const certificationsToAdd: string[] = [];

    for (const boxId of boxesToAdd) {
      const box = allBoxes.find(b => b.id === boxId);
      if (box) {
        totalPointsNeeded += box.skillPoints;
        if (box.grants.commands) {
          commandsToAdd.push(...box.grants.commands);
        }
        if (box.grants.certifications) {
          certificationsToAdd.push(...box.grants.certifications);
        }
      }
    }

    // Check if we have enough skill points
    if (usedSkillPoints + totalPointsNeeded > MAX_SKILL_POINTS) {
      setSkillPointWarning(true);
      return; // Not enough skill points
    }

    // Add all required boxes
    setSelectedSkillBoxes(prev => [...new Set([...prev, ...boxesToAdd])]);
    setUsedSkillPoints(prev => prev + totalPointsNeeded);
    setEarnedCommands(prev => [...new Set([...prev, ...commandsToAdd])]);
    setEarnedCertifications(prev => [...new Set([...prev, ...certificationsToAdd])]);
    recalculateModifiers();
  };
  };

  // Recalculate all modifiers
  const recalculateModifiers = () => {
    const newModifiers: {[key: string]: number} = {};

    // Add species modifiers
    for (const key in selectedSpecies.modifiers) {
      newModifiers[key] = (newModifiers[key] || 0) + selectedSpecies.modifiers[key];
    }

    // Add skill box modifiers using the helper function
    const allBoxes = getAllSkillBoxes();

    for (const boxId of selectedSkillBoxes) {
      const skillBox = allBoxes.find(box => box.id === boxId);

      if (skillBox?.grants.modifiers) {
        for (const key in skillBox.grants.modifiers) {
          newModifiers[key] = (newModifiers[key] || 0) + skillBox.grants.modifiers[key];
        }
      }
    }

    setSkillModifiers(newModifiers);
  };

  // Reset character - clear all skills and start fresh
  const resetCharacter = () => {
    setSelectedSkillBoxes([]);
    setUsedSkillPoints(0);
    setEarnedCommands([]);
    setEarnedCertifications([]);
    recalculateModifiers();
  };

  // Load saved templates from localStorage
  useEffect(() => {
    const savedTemplatesData = localStorage.getItem('swg-character-templates');
    if (savedTemplatesData) {
      try {
        const templates = JSON.parse(savedTemplatesData);
        setSavedTemplates(templates);
      } catch (error) {
        console.error('Error loading saved templates:', error);
      }
    }
  }, []);

  // Save template
  const saveTemplate = (name: string) => {
    const template: CharacterTemplate = {
      id: `template_${Date.now()}`,
      name: name,
      speciesId: selectedSpecies.id,
      professionId: selectedProfession.id,
      selectedSkillBoxes: [...selectedSkillBoxes],
      usedSkillPoints: usedSkillPoints,
      createdAt: new Date()
    };

    const updatedTemplates = [...savedTemplates, template];
    setSavedTemplates(updatedTemplates);
    localStorage.setItem('swg-character-templates', JSON.stringify(updatedTemplates));
    setShowSaveDialog(false);
    setTemplateName("");
  };

  // Load template
  const loadTemplate = (template: CharacterTemplate) => {
    // Find the species and profession
    const species = speciesData.find(s => s.id === template.speciesId);
    const profession = professionData.find(p => p.id === template.professionId);

    if (species && profession) {
      setSelectedSpecies(species);
      setSelectedProfession(profession);
      setSelectedSkillBoxes([...template.selectedSkillBoxes]);
      setUsedSkillPoints(template.usedSkillPoints);

      // Recalculate commands, certifications, and modifiers
      const allBoxes = getAllSkillBoxes();
      const commands: string[] = [];
      const certifications: string[] = [];

      for (const boxId of template.selectedSkillBoxes) {
        const box = allBoxes.find(b => b.id === boxId);
        if (box) {
          if (box.grants.commands) {
            commands.push(...box.grants.commands);
          }
          if (box.grants.certifications) {
            certifications.push(...box.grants.certifications);
          }
        }
      }

      setEarnedCommands(commands);
      setEarnedCertifications(certifications);
      recalculateModifiers();
    }

    setShowLoadDialog(false);
  };

  // Delete template
  const deleteTemplate = (templateId: string) => {
    const updatedTemplates = savedTemplates.filter(t => t.id !== templateId);
    setSavedTemplates(updatedTemplates);
    localStorage.setItem('swg-character-templates', JSON.stringify(updatedTemplates));
  };

  // Share build functionality
  const [shareData, setShareData] = useState('');
  const [copySuccess, setCopySuccess] = useState(false);

  const generateBuildCode = () => {
    try {
      const buildData = {
        version: "1.0",
        species: selectedSpecies.id,
        profession: selectedProfession.id,
        skills: selectedSkillBoxes,
        skillPoints: usedSkillPoints,
        timestamp: Date.now(),
        meta: {
          professionName: selectedProfession.name,
          speciesName: selectedSpecies.name
        }
      };

      const jsonString = JSON.stringify(buildData);
      const encoded = typeof btoa !== 'undefined' ? btoa(jsonString) : Buffer.from(jsonString).toString('base64');
      return `SWG-BUILD-${encoded}`;
    } catch (error) {
      console.error('Error generating build code:', error);
      return '';
    }
  };

  const handleGenerateShare = () => {
    const buildCode = generateBuildCode();
    setShareData(buildCode);
  };

  const handleCopyShare = () => {
    if (!shareData) return;

    try {
      if (typeof navigator !== 'undefined' && navigator.clipboard) {
        navigator.clipboard.writeText(shareData);
      } else {
        const textArea = document.createElement('textarea');
        textArea.value = shareData;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
      }
      setCopySuccess(true);
      setTimeout(() => setCopySuccess(false), 2000);
    } catch (error) {
      console.error('Copy failed:', error);
      setCopySuccess(false);
    }
  };

  // Load profession template
  const loadProfessionTemplate = (template: ProfessionTemplate) => {
    // Reset character first
    setSelectedSkillBoxes([]);
    setUsedSkillPoints(0);
    setEarnedCommands([]);
    setEarnedCertifications([]);

    // Apply template skills
    const allBoxes = getAllSkillBoxes();
    const commandsToAdd: string[] = [];
    const certificationsToAdd: string[] = [];
    let totalPointsUsed = 0;

    // Add skills from template
    for (const skillBoxId of template.skillBoxes) {
      const skillBox = allBoxes.find(box => box.id === skillBoxId);
      if (skillBox) {
        totalPointsUsed += skillBox.skillPoints;
        if (skillBox.grants.commands) {
          commandsToAdd.push(...skillBox.grants.commands);
        }
        if (skillBox.grants.certifications) {
          certificationsToAdd.push(...skillBox.grants.certifications);
        }
      }
    }

    // Set the new state
    setSelectedSkillBoxes([...template.skillBoxes]);
    setUsedSkillPoints(totalPointsUsed);
    setEarnedCommands([...new Set(commandsToAdd)]);
    setEarnedCertifications([...new Set(certificationsToAdd)]);

    // Find appropriate profession to display
    const templateProfessions = professionData.filter(prof =>
      template.skillBoxes.some(skillId => skillId.includes(prof.id))
    );
    if (templateProfessions.length > 0) {
      setSelectedProfession(templateProfessions[0]);
    }

    // Recalculate modifiers
    recalculateModifiers();
  };

  return (
    <div className="w-screen h-screen flex bg-[#00434c]">
      {/* Left Sidebar */}
      <div className="flex-1 h-full flex flex-col gap-1 p-1">
        <ProfessionList
          professions={professionData}
          selectedProfession={selectedProfession.id}
          selectedSkillBoxes={selectedSkillBoxes}
          onSelectProfession={handleProfessionChange}
        />
        
        <ExperienceTracker
          selectedSkillBoxes={selectedSkillBoxes}
          getAllSkillBoxes={getAllSkillBoxes}
        />
        
        <SkillModifiers modifiers={skillModifiers} />
      </div>

      {/* Main Skill Tree Area */}
      <div className="w-[60%] h-full flex flex-wrap p-1">
        <SkillTree
          profession={selectedProfession}
          selectedSkillBoxes={selectedSkillBoxes}
          onSelectSkillBox={handleSkillBoxSelectionWithWarning}
          onActiveSkillChange={handleActiveSkillChange}
          skillPointWarning={skillPointWarning}
          skillPoints={MAX_SKILL_POINTS - usedSkillPoints}
          maxSkillPoints={MAX_SKILL_POINTS}
          onResetCharacter={resetCharacter}
          onSpeciesChange={handleSpeciesChange}
          selectedSpecies={selectedSpecies}
          species={speciesData}
        />
        
        {/* Active Skill Details */}
        <div className="w-1/2 h-[30%] flex">
          <div className="flex-1 bg-[#00434c] border border-[#36b2bc] rounded-2xl m-1 p-2">
            <h2 className="text-white text-left mb-2 font-bold uppercase text-lg">Skill Modifiers</h2>
            <div className="bg-[#008ca7] border border-[#36b2bc] rounded-2xl p-2 h-full overflow-auto">
              {/* Active skill modifiers content */}
              <p className="text-white text-sm">
                {activeSkill ? `Details for ${activeSkill}` : 'Hover over a skill box to see details'}
              </p>
            </div>
          </div>
        </div>
        
        <div className="w-1/2 h-[30%] flex">
          <div className="flex-1 bg-[#00434c] border border-[#36b2bc] rounded-2xl m-1 p-2">
            <h2 className="text-white text-right mb-2 font-bold uppercase text-lg">Commands and Certifications</h2>
            <div className="bg-[#008ca7] border border-[#36b2bc] rounded-2xl p-2 h-full overflow-auto">
              {/* Active skill commands content */}
              <p className="text-white text-sm">
                {activeSkill ? `Commands for ${activeSkill}` : 'Hover over a skill box to see commands'}
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Right Sidebar */}
      <div className="flex-1 h-full flex flex-col gap-1 p-1">
        <Commands
          commands={earnedCommands}
          certifications={earnedCertifications}
        />
        
        <div className="bg-[#00434c] border border-[#36b2bc] rounded-2xl p-2 flex-1">
          <h4 className="text-white text-center mb-2 font-bold text-sm">Titles</h4>
          <div className="bg-[#008ca7] border border-[#36b2bc] rounded-2xl p-2 h-full overflow-auto">
            {/* Titles content */}
            <p className="text-white text-sm">Character titles will appear here</p>
          </div>
        </div>
      </div>
    </div>
  );
}
